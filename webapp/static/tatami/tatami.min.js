class TJ_Toggle{static items={}
constructor(controller,ruleset){TJ_Toggle.items[controller.outerHTML]=this
this.controller=controller
this.ruleset=ruleset||JSON.parse(controller.getAttribute("data-tj-toggle"))
this.attachListener()}
attachListener(){this.controller.addEventListener(this.ruleset.on||'click',this.handleEvent.bind(this))}
handleEvent(e){e.stopPropagation();e.preventDefault();document.querySelectorAll(this.ruleset.target).forEach((t)=>{t.classList.toggle(this.ruleset.class)})
if(this.ruleset.ownClass)
this.controller.classList.toggle(this.ruleset.ownClass)
return false}
static fromItem(controller){if(controller.outerHTML in TJ_Toggle.items)
return TJ_Toggle.items[controllerouterHTML]
else
return new TJ_Toggle(controller)}}
document.querySelectorAll("[data-tj-toggle]").forEach((con)=>{TJ_Toggle.fromItem(con);})
class TJ_OneOf{static items={}
constructor(controller,ruleset){TJ_OneOf.items[controller.outerHTML]=this
this.controller=controller
this.ruleset=ruleset||JSON.parse(controller.getAttribute("data-tj-oneof"))
this.attachListener()}
attachListener(){this.controller.addEventListener(this.ruleset.on||'click',this.handleEvent.bind(this))}
handleEvent(e){e.stopPropagation();e.preventDefault();document.querySelectorAll(this.ruleset.common).forEach((t)=>{if(this.ruleset.classWhen!="off")
t.classList.remove(this.ruleset.class)
else
t.classList.add(this.ruleset.class)})
if(this.ruleset.classWhen!="off")
document.querySelector(this.ruleset.unique).classList.add(this.ruleset.class)
else
document.querySelector(this.ruleset.unique).classList.remove(this.ruleset.class)
if(this.ruleset.ownClass){document.querySelectorAll(this.ruleset.ownCommon).forEach((t)=>{if(this.ruleset.ownClassWhen!="off")
t.classList.remove(this.ruleset.ownClass)
else
t.classList.add(this.ruleset.ownClass)})
if(this.ruleset.ownClassWhen!="off")
this.controller.classList.add(this.ruleset.ownClass)
else
this.controller.classList.remove(this.ruleset.ownClass)}
return false}
static fromItem(controller){if(controller.outerHTML in TJ_OneOf.items)
return TJ_OneOf.items[controllerouterHTML]
else
return new TJ_OneOf(controller)}}
document.querySelectorAll("[data-tj-oneof]").forEach((con)=>{TJ_OneOf.fromItem(con);})
class TJ_Dropdown{static items={}
constructor(controller,ruleset){TJ_Dropdown.items[controller.outerHTML]=this
this.controller=controller
this.ruleset=ruleset||JSON.parse(controller.getAttribute("data-tj-dropdown"))
this.attachListener()}
attachListener(){this.controller.addEventListener(this.ruleset.on||'click',this.handleEvent.bind(this))}
handleEvent(e){e.stopPropagation();e.preventDefault();document.querySelectorAll(this.ruleset.target).forEach((t)=>{t.classList.toggle('shown')
t.style.top=(this.controller.clientHeight+(this.ruleset.padding||4))+'px';})
if(this.ruleset.ownClass)
this.controller.classList.toggle(this.ruleset.ownClass)
return false}
static fromItem(controller){if(controller.outerHTML in TJ_Dropdown.items)
return TJ_Dropdown.items[controllerouterHTML]
else
return new TJ_Dropdown(controller)}}
document.querySelectorAll("[data-tj-dropdown]").forEach((con)=>{TJ_Dropdown.fromItem(con);})